#lang racket

#lang racket

; Day 2 refresh

;(define a 10)
;
;(if (= a 0) 1 2)
;
;(cond ((< a 0) 1)
;      ((= a 0) 2)
;      ((> a 0) 3))
;
;(if (< a 0) 1
;    (if (= a 0) 2 3))
;
;(let ((x (+ a 10))
;      (y (- a 10)))
;  (+ x y))
;
;
;(define (f a)
;  (define x (+ a 10))
;  (define y (- 1 10))
;  (+ x y)
;  )
;
;(f 2)
;
;(define (g a)
;  (let ((x (+ a 10))
;        (y (- a 10)))
;    (+ x y)))
;
;;(define (g a)
;;  (let ((x (+ a 10))
;;        (y (- x 10))) ; Can't do this because expressions are evaluated before variables.
;;    (+ x y)))
;
;(define (shadow a)
;  (let ((x (+ a 10))
;        (a (- a 10)))
;    (+ x a)))
;
;(define (e a)
;  (define (h x)
;    (+ (square x) 2))
;  (define (square x)
;    (* x x))
;  (h 10)
;  )

(define (h a)
  (let ((x (+ a 10)))
    (let ((y (+ x 2)))
    (+ x y))))

(h 2)

(define (k a)
  (let* ((x (+ a 10))
         (y (+ x 2)))
    (+ x y)))

(k 2)

(define (square x) (* x x))

;(define (fixed-point f first-guess tolerance)
;  ; Check if two guesses were close enough
;  (define (close-enough? v1 v2)
;    (< (abs (- v1 v1)) tolerance))
;
;  ; Try the next value
;  (define (try guess)
;    (let ((next (f guess)))
;      (if (close-enough? guess next)
;          next
;          (try next))))
;
;  ; Run it
;  (try first-guess))

(define tolerance 0.00001)

(define (fixed-point f first-guess)
  (define (close-enough? v1 v2)
    (< (abs (- v1 v1)) tolerance))
  (define (try guess)
    (let ((next (f guess)))
      (if (close-enough? guess next)
          next
          (try next))))
  (try first-guess)
  )

(fixed-point sqrt 4)
(fixed-point cos 1.0)

(define (inc x) (+ x 1))

(define (double f)
  (lambda (x) (f (f x))))

(((double (double double)) inc) 5)

; (double double) ---> (lambda (x) (double (double x)))
; ((double double) inc) ---> (double (double inc))
;                       ---> (double (lambda (x) (inc (inc x))))
;                       ---> (lambda (x) (inc (inc x)) (lambda (x) (inc (inc x))))
;                       ---> (lambda (x) ((+ x 1) (+ x 1)) (lambda (x) ((+ x 1) (+ x 1))


(define a (lambda (y) ((lambda (x) (inc (inc x))) ((lambda (x) (inc (inc x))) y))))

(a 0)
;
;(define (f x)
;  (lambda (x) (x)))
;
;(define (g y)
;  (lambda (y) (y)))


; Exercise 1.42
; Side-comment: function composition is the semi colon of functional programming

(define (compose f g)
  (lambda (x) f(g x)))

((compose square inc) 6)
